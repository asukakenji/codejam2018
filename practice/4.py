# code jam: Practice Session 2018: Q4: Bathroom Stalls

# Limits
# 1 <= T <= 100.
# 1 <= K <= N.
# Time limit: 30 seconds per test set.
# Memory limit: 1GB.
#
# Test set 1 (Visible)
# 1 <= N <= 1000.
#
# Test set 2 (Visible)
# 1 <= N <= 10**6.
#
# Test set 3 (Hidden)
# 1 <= N <= 10**18.

# 0   1   0    y z N K
# | (0,0) | -> 0 0 1 1

# 0   1     2   0    y z N K
# | (0,1) (1,0) | -> 1 0 2 1
# |       (0,0) | -> 0 0 2 2 = (1, 1)

# 0   2     1     3   0    y z N K
# | (0,2) (1,1) (2,0) | -> 1 1 3 1
# | (0,0)       (0,0) | -> 0 0 3 2 == (1, 1)
# |             (0,0) | -> 0 0 3 3 == (1, 1)

# 0   3     1     2     4   0    y z N K
# | (0,3) (1,2) (2,1) (3,0) | -> 2 1 4 1
# | (0,0)       (0,1) (1,0) | -> 1 0 4 2 == (2, 1)
# | (0,0)             (0,0) | -> 0 0 4 3 == (1, 1)
# |                   (0,0) | -> 0 0 4 4 == (2, 2)

# 0   2     4     1     3     5   0    y z N K
# | (0,4) (1,3) (2,2) (3,1) (4,0) | -> 2 2 5 1
# | (0,1) (1,0)       (0,1) (1,0) | -> 1 0 5 2 == (2, 1)
# |       (0,0)       (0,1) (1,0) | -> 1 0 5 3 == (2, 1)
# |       (0,0)             (0,0) | -> 0 0 5 4 == (2, 2)
# |                         (0,0) | -> 0 0 5 5 == (2, 2)

# 0   3     4     1     5     2     6   0    y z N K
# | (0,5) (1,4) (2,3) (3,2) (4,1) (5,0) | -> 3 2 6 1
# | (0,1) (1,0)       (0,2) (1,1) (2,0) | -> 1 1 6 2 == (3, 1)
# | (0,1) (1,0)       (0,0)       (0,0) | -> 1 0 6 3 == (2, 1)
# |       (0,0)       (0,0)       (0,0) | -> 0 0 6 4 == (3, 2)
# |                   (0,0)       (0,0) | -> 0 0 6 5 == (2, 2)
# |                               (0,0) | -> 0 0 6 6 == (3, 3)

# 0   4     2     5     1     6     3     7   0    y z N K
# | (0,6) (1,5) (2,4) (3,3) (4,2) (5,1) (6,0) | -> 3 3 7 1
# | (0,2) (1,1) (2,0)       (0,2) (1,1) (2,0) | -> 1 1 7 2 == (3, 1)
# | (0,0)       (0,0)       (0,2) (1,1) (2,0) | -> 1 1 7 3 == (3, 1)
# | (0,0)       (0,0)       (0,0)       (0,0) | -> 0 0 7 4 == (3, 2)
# |             (0,0)       (0,0)       (0,0) | -> 0 0 7 5 == (3, 2)
# |                         (0,0)       (0,0) | -> 0 0 7 6 == (3, 3)
# |                                     (0,0) | -> 0 0 7 7 == (3, 3)

# 0   5     3     6     1     7     2     4     8   0    y z N K
# | (0,7) (1,6) (2,5) (3,4) (4,3) (5,2) (6,1) (7,0) | -> 4 3 8 1
# | (0,2) (1,1) (2,0)       (0,3) (1,2) (2,1) (3,0) | -> 2 1 8 2 == (4, 1)
# | (0,2) (1,1) (2,0)       (0,0)       (0,1) (1,0) | -> 1 1 8 3 == (3, 1)
# | (0,0)       (0,0)       (0,0)       (0,1) (1,0) | -> 1 0 8 4 == (4, 2)
# | (0,0)       (0,0)       (0,0)             (0,0) | -> 0 0 8 5 == (3, 2)
# |             (0,0)       (0,0)             (0,0) | -> 0 0 8 6 == (4, 3)
# |                         (0,0)             (0,0) | -> 0 0 8 7 == (3, 3)
# |                                           (0,0) | -> 0 0 8 8 == (4, 4)

def read_int():
    return int(raw_input())

def read_int_n():
    return map(int, raw_input().split())

def get_y_z(n, k):
    if k == 1:
        if n & 1 == 0:
            # Even Number
            return n >> 1, (n >> 1) - 1
        else:
            # Odd Number
            return n >> 1, n >> 1
    else:
        if n & 1 == 0:
            # Even Number
            if k & 1 == 0:
                # Even Number
                return get_y_z(n >> 1, k >> 1)
            else:
                # Odd Number
                return get_y_z((n >> 1) - 1, k >> 1)
        else:
            # Odd Number
            return get_y_z(n >> 1, k >> 1)

T = read_int()
x = 1
while x <= T:
    N, K = read_int_n()
    y, z = get_y_z(N, K)
    print 'Case #%d: %d %d' % (x, y, z)
    x += 1
